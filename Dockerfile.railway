# Dockerfile Railway - Version simplifiée
FROM node:18-alpine as frontend-build

# Build du frontend
WORKDIR /app
COPY frontend/package*.json ./
RUN npm install --silent
COPY frontend/ ./
RUN npm run build

# Image finale avec PostgreSQL + PHP + Frontend
FROM php:8.1-apache

# Installer PostgreSQL, Node.js et les dépendances
RUN apt-get update && apt-get install -y \
    postgresql postgresql-contrib \
    libpq-dev \
    zip \
    unzip \
    git \
    supervisor \
    curl \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && docker-php-ext-install pdo pdo_pgsql \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Installer Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Installer serve pour le frontend
RUN npm install -g serve

# Configurer Apache
RUN a2enmod rewrite
RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf

# Configuration Apache
RUN echo '<VirtualHost *:80>\n\
    DocumentRoot /var/www/html\n\
    <Directory /var/www/html>\n\
        Options Indexes FollowSymLinks\n\
        AllowOverride All\n\
        Require all granted\n\
        FallbackResource /index.php\n\
    </Directory>\n\
    ErrorLog ${APACHE_LOG_DIR}/error.log\n\
    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\
</VirtualHost>' > /etc/apache2/sites-available/000-default.conf

# Copier le backend
WORKDIR /var/www/html
COPY backend/ ./
RUN composer install --optimize-autoloader || true

# Copier le frontend buildé
COPY --from=frontend-build /app/build ./frontend-build

# Créer le script d'initialisation de la base de données
RUN echo '#!/bin/bash\n\
/etc/init.d/postgresql start\n\
sleep 5\n\
sudo -u postgres psql --command "CREATE USER postgres WITH SUPERUSER PASSWORD '\''postgres'\'';"\n\
sudo -u postgres createdb -O postgres gestion_salles\n\
sudo -u postgres psql -d gestion_salles -c "CREATE TABLE IF NOT EXISTS salles (id SERIAL PRIMARY KEY, nom VARCHAR(255) NOT NULL, capacite INTEGER NOT NULL, equipement TEXT, disponible BOOLEAN DEFAULT true, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);"\n\
sudo -u postgres psql -d gestion_salles -c "INSERT INTO salles (nom, capacite, equipement, disponible) VALUES ('\''Salle A101'\'', 30, '\''Projecteur, Tableau blanc'\'', true), ('\''Salle B202'\'', 50, '\''Vidéoprojecteur, Micro'\'', true), ('\''Salle C303'\'', 20, '\''Tableau interactif'\'', false), ('\''Salle D404'\'', 40, '\''Système audio, Écran'\'', true) ON CONFLICT DO NOTHING;"\n\
' > /usr/local/bin/init-db.sh && chmod +x /usr/local/bin/init-db.sh

# Configuration Supervisor
RUN echo '[supervisord]\n\
nodaemon=true\n\
\n\
[program:postgresql]\n\
command=/usr/lib/postgresql/13/bin/postgres -D /var/lib/postgresql/13/main -c config_file=/etc/postgresql/13/main/postgresql.conf\n\
user=postgres\n\
autostart=true\n\
autorestart=true\n\
\n\
[program:apache2]\n\
command=/usr/sbin/apache2ctl -D FOREGROUND\n\
autostart=true\n\
autorestart=true\n\
\n\
[program:frontend]\n\
command=serve -s /var/www/html/frontend-build -l 3000\n\
autostart=true\n\
autorestart=true\n\
\n\
[program:init-db]\n\
command=/usr/local/bin/init-db.sh\n\
autostart=true\n\
autorestart=false\n\
startsecs=0\n\
' > /etc/supervisor/conf.d/supervisord.conf

# Permissions
RUN chown -R www-data:www-data /var/www/html && chmod -R 755 /var/www/html

# Exposer les ports
EXPOSE 80 3000

# Démarrer tous les services
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
