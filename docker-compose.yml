services:
  # Service Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: gestion_salles_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: gestion_salles
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Backend PHP
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gestion_salles_backend
    environment:
      DB_HOST: db
      DB_NAME: gestion_salles
      DB_USER: postgres
      DB_PASSWORD: postgres
    ports:
      - "8080:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/var/www/html
    networks:
      - app_network
    restart: unless-stopped

  # Service Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gestion_salles_frontend
    environment:
      REACT_APP_API_URL: http://localhost:8080/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app_network
    restart: unless-stopped

  # Service Prometheus (Collecte des métriques)
  prometheus:
    image: prom/prometheus:latest
    container_name: gestion_salles_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - app_network
    restart: unless-stopped

  # Service Grafana (Visualisation des métriques)
  grafana:
    image: grafana/grafana:latest
    container_name: gestion_salles_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - app_network
    restart: unless-stopped

  # Service Node Exporter (Métriques système : CPU, RAM, etc.)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: gestion_salles_node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - app_network
    restart: unless-stopped

# Réseau commun
networks:
  app_network:
    driver: bridge
    name: gestion_salles_network

# Volumes
volumes:
  postgres_data:
    name: gestion_salles_postgres_data
  prometheus_data:
    name: gestion_salles_prometheus_data
  grafana_data:
    name: gestion_salles_grafana_data


