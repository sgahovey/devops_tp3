version: '3.8'

services:
  # Service Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: gestion_salles
    # Pas de volumes - Railway gère la persistance
    # Initialisation de la base de données
    command: |
      sh -c "
      docker-entrypoint.sh postgres &
      sleep 10
      psql -U postgres -d gestion_salles -c \"CREATE TABLE IF NOT EXISTS salles (id SERIAL PRIMARY KEY, nom VARCHAR(255) NOT NULL, capacite INTEGER NOT NULL, equipement TEXT, disponible BOOLEAN DEFAULT true, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);\"
      psql -U postgres -d gestion_salles -c \"INSERT INTO salles (nom, capacite, equipement, disponible) VALUES ('Salle A101', 30, 'Projecteur, Tableau blanc', true), ('Salle B202', 50, 'Vidéoprojecteur, Micro', true), ('Salle C303', 20, 'Tableau interactif', false), ('Salle D404', 40, 'Système audio, Écran', true) ON CONFLICT DO NOTHING;\"
      wait
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Service Backend PHP
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.railway
    environment:
      DB_HOST: db
      DB_NAME: gestion_salles
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_PORT: 5432
    ports:
      - "80:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped

  # Service Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.railway
    environment:
      REACT_APP_API_URL: ${RAILWAY_PUBLIC_DOMAIN:-http://localhost:8080}/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app_network
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

# Pas de volumes - Railway gère la persistance
